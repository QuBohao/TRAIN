# my_string="2.8125 2.52938 2.61338 2.63987 3.08948 3.14214 3.312 3.10083 2.98366 2.90757 2.82692 2.97473 2.89972 2.74659 2.54947 2.52389 2.27436 2.08084 1.70092 1.2656 0.9464 0.85712 0.78414 0.5835 0.52598 0.42462 0.40915 0.53458 0.68773 1.0912 1.72051 2.28332 2.62329 3.48825 4.18353 6.13266 7.2246 8.35072 8.92826 10.33222 12.22145 12.82319 14.45994 14.65355 16.76984 17.26271 18.32083 18.44092 18.53881 18.8241 20.57056 23.05768 24.46048 23.35508 22.86849 23.6793 23.43243 24.6273 26.99065 29.63721 32.22701 36.58668 38.41311 40.7867 43.20141 41.78974 42.11797 43.19713 45.68801 49.76252 51.85145 55.09596 56.41127 57.87491 61.51525 62.06488 68.51085 72.73094 78.08182 79.77141 80.73639 83.10378 78.59988 78.14569 74.33616 74.77859 74.7179 75.58784 78.3503 77.03613 76.95936 76.13827 75.20451 76.77645 78.57996 78.89298 79.39039 80.35203 79.75976 77.98062 80.56914 80.05231 83.89551 84.17463 83.70553 86.38612 88.88977 93.28813 92.35185 97.79501 97.90735 103.05311 102.66532 106.02693 114.49302 117.49421 126.19811 125.10017 129.23306 134.9287 137.6725 146.56076 149.33328 148.09412 148.28319 153.51781 157.07382 160.58568 161.81903 162.52151 161.02441 166.8392 171.42838 176.53134 179.18665 180.95844 183.83365 187.07645 191.8748 195.70677 200.84378 204.94569 210.10945 208.39308 209.16177 210.78001 212.11482 215.11366 214.494 214.50407 215.74832 215.50653 216.17743 210.78337 211.46004 211.15793 213.58702 211.87651 209.13341 206.00101 205.28978 205.72792 202.62054 205.86043 204.54895 209.83464 216.43359 225.33545 229.302 231.55568 234.97543 234.9751 239.0132 240.62216 243.16409 243.38377 243.97226 244.45122 245.32846 243.64989 245.78552 246.95032 247.40463 243.80313 242.8701 241.96028 245.56439 244.71021 247.30812 246.55527 247.30087 247.8613 248.11665 248.21864 251.1031 246.34438 245.51245 244.95901 248.336 252.07631 250.71472 250.0955 250.24745 251.60612 252.9593 254.32843 253.2681 252.18596 250.49489 249.16089 248.30545 250.38393 250.66858 250.45343 250.12624 248.91255 247.12753 247.32973 247.28436 247.43814 246.15855 245.42009 248.64998 249.00362 249.42467 249.52654 250.21498 253.61218 254.09325 253.33202 251.08519 253.08313 253.27197 253.92795 254.40889 254.64734 253.12508 252.05231 249.41217 249.73462 248.38481 249.90947 250.6113 250.13065 249.78171 250.43248 250.63345 251.79063 249.97002 250.33003 249.89752 248.70451 247.24457 246.72421 247.4393 249.32224 250.63101 250.6109 248.43269 246.62727 246.70033 248.01604 246.96005 245.07114 244.44951 244.21147 244.85576 243.3465 244.24255 243.54477 244.12689 244.4391 245.40913 244.66621 247.59309 247.37209 248.90575 248.4474 245.67947 244.34592 242.61922 242.90575 245.43916 243.63615 239.74754 238.60643 234.81432 237.95873 237.58208 239.77921 241.29353 241.02213 240.74306 236"
#
#
# split_list = my_string.split()
#
#
# for word in split_list:
#     print(word)
import math

list=[



]

l=len(list)
#,
# for i in range(l):
#     index = int(math.floor(i *6.5))
#     if index < 650:
#         print(list[index])l
#         # print(index)
#     else:
#         pass
# 进行自助法模拟
import numpy as np

for i in range(l):

    # 给定的中心数
    center = list[i]

    # 模拟次数
    num_samples = 1000

    # 使用正态分布模拟数据，均值为给定的中心数，标准差可以根据需要调整
    mean = center
    random_int = center / 80
    if center < 10:
        # random_int = np.random.randint(1, 2)
        random_int = np.random.randint(0, 1)
    elif center > 10 and center < 20:
        random_int = center / 10
    elif center > 20 and center < 30:
        random_int = center / 20
    elif center > 30 and center < 100:
        random_int = center / 30

    std_dev = random_int
    # print(random_int)
    # print(center)
    # 生成模拟数据
    simulated_data = np.random.normal(loc=mean, scale=std_dev, size=num_samples)



    # # 进行5次采样
    # num_samples_per_experiment = 5
    # sample_variances = []
    #
    # for i in range(num_samples_per_experiment):
    #     sample = np.random.choice(simulated_data, size=num_samples, replace=True)
    #     sample_variances.append(np.var(sample))

    # 输出每次采样数据的方差
    # print("5次采样数据的方差:", sample_variances)

    sample = np.random.choice(simulated_data, size=num_samples, replace=True)
    print(np.var(sample))
    # for i in range(len(sample_variances)):
    #     print(sample_variances[0])

